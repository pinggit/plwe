#config file


####################################################################
##1. general parameters                                           ##
####################################################################
set debug 1                     ;#debug level: 1(brief), 3(verbose)
set login_script attp           ;#script used to login to the router
                                ;  #attn - nina's att account
                                ;  #attse - att se account
                                ;  #attjtac - att jtac account
                                ;  #attjlab - account to login to jtac lab

set logfile "log_$runtime.txt"          ;#log file name, optional
set logfile_issue "issue_969383_$runtime.txt" ;#log file only after issue detected, optional
#set logfile "~/temp-transfer/temp_log1.txt"
#set logfile "/mnt/scoopy2/2014-0129-0600/script.log"

set flag_check_method 1         ;#any flag indicate a hit
set check_intv 20               ;#interval between each round check
set maxrounds 20000             ;#max rounds to check
set maxrounds_captured 10       ;#max rounds to capture the issue
set maxfilesize 100000000        ;#max size of each log file(in Bytes) before get gzipped

#list of all routers, for login purpose only(optional).
#if not define, will use the router name from 'pre_collect', 'check' and 'collect'
#set routers {pe42}

#pre_collect
set pre_collect(pe42) [ list         \
    "show system uptime"                \
]

####################################################################
##2. router-cmds array: check(ROUTERNAME) :                       ##
##  cmds that are used to detect the issues                       ##
####################################################################
set check(pe42) [ list        \
    "show firewall filter vpls_PPCOS_20:20:20:20:12:8_out-xe-4/0/0.503-o" \
]

#"issue" definition 
#  set rule_calc { expr ... }
#  if omitted, use default rule - consider an issue whichever command detect an
#  issue. 
#  in this example, a complex issue definition(rule) is defined: it is
#  considered an issue only if, in any router, one of the 1st/4th, 2nd/5th or
#  3rd/6th streams does not look "consistent" (meaning like stream 1 is
#  detected to be a problem however stream 4 looks OK, so on so forth.
#  according to the check array, this means c-stream was not totally forwarded
#  into p-stream, or vice versa. In either case, it means packet loss)
# 
#set rule_calc {                                                       \
#    expr                                                    \
#        [expr $result_flag($router,1) ^ $result_flag($router,4)] ||     \
#        [expr $result_flag($router,2) ^ $result_flag($router,5)] ||     \
#        [expr $result_flag($router,3) ^ $result_flag($router,6)]        \
#}
#optional: print a essage  about currently defined rule, when script run
#  for debugging
#set rule_msg "consider an issue only when c-stream and p-stream are not consistent"






####################################################################
##3. router-cmds array: collect(ROUTERNAME) :                     ##
##  cmds that will be sent right after the issue got detected     ##
####################################################################

set collect(pe42) [ list 		\
    "show interfaces queue xe-4/0/0"    \
] 






####################################################################
##4. (optional) cmd handler(procedure):proc_ROUTERNAME_CMDNUMBER  ##
##  to parse the output of each {router,cmd} to detect any issues ##
####################################################################
proc proc_pe42_1 {router cmd {rate_expected 400}} {

#this is the handler for the No.1 cmd (indicated in the proc name: ..."1") from
#the "check" command list (part 2 of this config file), which will be sent to router "sfpjar2":
#  "show multicast route group 239.2.3.0 source-prefix $p_s_sfpjar2 extensive | match pps"
#one proc (proc_ROUTER1_2, proc_ROUTER2_1, etc) may be (optionally) defined for
#each cmd.  the proc need to returned either 1 or 0, based on whether the issue get
#detected or not

#init the procedure, don't change these 2 lines
global init_handler
eval $init_handler


#some "built-in" vars available to use in the handler proc:
#  cout_list            :a list that stores each line of the command output
#  cout_list_prev       :same, but stores command output from previous execution(for comparison)
#  cout_llen            :total numer of lines of the command output

#CLASS_NC-H_IC-ge-1/0/4.503-o                            0                    0
#CLASS_NC-L_IC-ge-1/0/4.503-o                            0                    0

#your own code-----------------------------------------------start
    #iterate the cmd output
    for {set i 0} {$i<$cout_llen} {incr i 1} {          ;#for each line from cmd output
        set cout_line [lindex $cout_list $i]            ;#take a line from the output list
        set cout_line_prev [lindex $cout_list_prev $i]  ;#take the same line,from the previous capture

        #process each line ...
        #  Statistics: 2 kBps, 20 pps, 12638517 packets
        set matchok [regexp {CLASS_NC-H_IC-ge-.*-o\s+0\s+0} $cout_line]

        if $debug {                                     ;#print the lines to debug, if something went wrong
            send_log "take a curr line:--$cout_line--\n"
            send_log "regex matching results are $matchok\n"
        }

        if $matchok {
            myputs "found the issue!"
            return 1
        } else {
            #todo: remove the extra echoed stuff in cmd_out
        }
    }
    return 0                   ;#no issue detected
#your own code-----------------------------------------------end
}



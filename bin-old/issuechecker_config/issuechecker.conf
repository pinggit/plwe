#config file


####################################################################
##1. general parameters                                           ##
####################################################################
#set debug 1                     ;#debug level: 1(brief), 3(verbose)
#set login_script attjlab           ;#script used to login to the router
#                                ;  #attn - nina's att account
#                                ;  #attse - att se account
#                                ;  #attjtac - att jtac account
#                                ;  #attjlab - account to login to jtac lab
#
set logfile "log1_973222_$runtime.txt"          ;#log file name, optional
set logfile_issue "log2_973222_$runtime.txt" ;#log file only after issue detected, optional
##set logfile "~/temp-transfer/temp_log1.txt"
##set logfile "/mnt/scoopy2/2014-0129-0600/script.log"
#
#set flag_check_method 1         ;#any flag indicate a hit
#set check_intv 20               ;#interval between each round check
#set maxrounds 20000             ;#max rounds to check
#set maxrounds_captured 10       ;#max rounds to capture the issue
#set maxfilesize 100000000        ;#max size of each log file(in Bytes) before get gzipped

#list of all routers, for login purpose only, optional.
#if not defined, will use the router name from 'pre_test', 'test', 'check' and 'collect'
#set routers {sfpjar2 chpjar1 nypjar2}   

#pre_test: run just 1 time before the test loop
set pre_test(sfpjar2) [ list         \
    "show system uptime"                \
    "show version"                \
]
set pre_test(chpjar1) $pre_test(sfpjar2)
set pre_test(nypjar2) $pre_test(sfpjar2)


#test: commands ran in the test loop before 'check' commands
set test(sfpjar2) [ list        \
    "configure private" "exit"  \
]
set test(chpjar1) $test(sfpjar2)
set test(nypjar2) $test(sfpjar2)


#todo:
#config_change, in defined sequence among all routers
#set config_change(1,sfpjar2) [ list       \
#    "configure private"                 \
#    "exit"                              \
#]
#set config_change(2,chpjar1) $config_change(sfpjar2)
#set config_change(3,nypjar2) $config_change(sfpjar2)
#set config_change(sfpjar2) [ list       \
#    "SWITCHOVER"                        \
#]


####################################################################
##2. router-cmds array: check(ROUTERNAME) :                       ##
##  cmds that are used to detect the issues                       ##
####################################################################
set p_g "239.2.3.0"             ;#user defined vars, optional
set c_g "238.1.1.78"            ;#can be placed in CLI list later
set p_s_sfpjar2 "10.144.10.91"
set c_s_sfpjar2 "151.151.151"
set p_s_chpjar1 "10.144.10.90"
set c_s_chpjar1 "2.2.5"
set p_s_nypjar2 "10.144.10.81"
set c_s_nypjar2 "27.27.27"
#set p_s "192.168.1.78"
#set c_g "234.1.1.1"

set check(sfpjar2) [ list        \
    "show multicast route group 239.2.3.0 source-prefix $p_s_sfpjar2 extensive | match pps"     \
    "show multicast route group 239.2.3.0 source-prefix $p_s_chpjar1 extensive | match pps"     \
    "show multicast route group 239.2.3.0 source-prefix $p_s_nypjar2 extensive | match pps"     \
    "show multicast route instance 13979:11001 group $c_g source-prefix $c_s_sfpjar2/24 extensive | match pps | no-more"  \
    "show multicast route instance 13979:11001 group $c_g source-prefix $c_s_chpjar1/24 extensive | match pps | no-more"  \
    "show multicast route instance 13979:11001 group $c_g source-prefix $c_s_nypjar2/24 extensive | match pps | no-more"  \
]
set check(chpjar1) $check(sfpjar2)
set check(nypjar2) $check(sfpjar2)

#"issue" definition 
#  set rule_calc { expr ... }
#  if omitted, use default rule - consider an issue whichever command detect an
#  issue. 
#  in this example, a complex issue definition(rule) is defined: it is
#  considered an issue only if, in any router, one of the 1st/4th, 2nd/5th or
#  3rd/6th streams does not look "consistent" (meaning like stream 1 is
#  detected to be a problem however stream 4 looks OK, so on so forth.
#  according to the check array, this means c-stream was not totally forwarded
#  into p-stream, or vice versa. In either case, it means packet loss)
# 
set rule_calc {                                                       \
    expr                                                    \
        [expr $result_flag($router,1) ^ $result_flag($router,4)] ||     \
        [expr $result_flag($router,2) ^ $result_flag($router,5)] ||     \
        [expr $result_flag($router,3) ^ $result_flag($router,6)]        \
}
#optional: print a essage  about currently defined rule, when script run
#  for debugging
set rule_msg "consider an issue only when c-stream and p-stream are not consistent"






####################################################################
##3. router-cmds array: collect(ROUTERNAME) :                     ##
##  cmds that will be sent right after the issue got detected     ##
####################################################################

set collect(chpjar1) [ list 									\
    "file copy /var/log/pim.log p-pim-$runtime.log"                         \
    "file copy /var/log/jtac-pim.log c-pim-$runtime.log"                    \
    "file copy ping-mdt.txt ping-mdt-$runtime.log"                    \
    "show multicast route instance 13979:11001 group $c_g source-prefix $c_s_sfpjar2/24 extensive | match pps | no-more" \
    "show multicast route instance 13979:11001 group $c_g source-prefix $c_s_sfpjar2/24 extensive | match pps | no-more" \
    "show multicast route instance 13979:11001 group $c_g source-prefix $c_s_sfpjar2/24 extensive | no-more" \
    "show pim join instance 13979:11001 $c_g extensive | find $c_s_sfpjar2 | no-more" \
    "show pim join instance 13979:11001 $c_g extensive | find $c_s_sfpjar2 | match \"$c_s_sfpjar2|uptime\" | except since | no-more" \
    "show pim mdt incoming instance 13979:11001 | match \"group|$c_s_sfpjar2\" | no-more"          \
    "show pim mdt incoming instance 13979:11001 | match \"group|$c_s_sfpjar2\" | count"            \
    "show pim mdt data-mdt-joins instance 13979:11001 | match $c_s_sfpjar2"       \
    "show multicast route group $p_g source-prefix $p_s_sfpjar2 extensive | no-more"  \
    "show pim mdt data-mdt-joins instance 13979:11001 | match $c_s_sfpjar2"        \
    "show multicast route instance 13979:11001 group $c_g source-prefix $c_s_chpjar1/24 extensive | match pps | no-more" \
    "show multicast route instance 13979:11001 group $c_g source-prefix $c_s_chpjar1/24 extensive | match pps | no-more" \
    "show multicast route instance 13979:11001 group $c_g source-prefix $c_s_chpjar1/24 extensive | no-more" \
    "show pim join instance 13979:11001 $c_g extensive | find $c_s_chpjar1 | no-more" \
    "show pim join instance 13979:11001 $c_g extensive | find $c_s_chpjar1 | match \"$c_s_chpjar1|uptime\" | except since | no-more" \
    "show pim mdt incoming instance 13979:11001 | match \"group|$c_s_chpjar1\" | no-more"          \
    "show pim mdt incoming instance 13979:11001 | match \"group|$c_s_chpjar1\" | count"            \
    "show pim mdt data-mdt-joins instance 13979:11001 | match $c_s_chpjar1"       \
    "show multicast route group $p_g source-prefix $p_s_chpjar1 extensive | no-more"  \
    "show pim mdt data-mdt-joins instance 13979:11001 | match $c_s_chpjar1"        \
    "show multicast route instance 13979:11001 group $c_g source-prefix $c_s_nypjar2/24 extensive | match pps | no-more" \
    "show multicast route instance 13979:11001 group $c_g source-prefix $c_s_nypjar2/24 extensive | match pps | no-more" \
    "show multicast route instance 13979:11001 group $c_g source-prefix $c_s_nypjar2/24 extensive | no-more" \
    "show pim join instance 13979:11001 $c_g extensive | find $c_s_nypjar2 | no-more" \
    "show pim join instance 13979:11001 $c_g extensive | find $c_s_nypjar2 | match \"$c_s_nypjar2|uptime\" | except since | no-more" \
    "show pim mdt incoming instance 13979:11001 | match \"group|$c_s_nypjar2\" | no-more"          \
    "show pim mdt incoming instance 13979:11001 | match \"group|$c_s_nypjar2\" | count"            \
    "show pim mdt data-mdt-joins instance 13979:11001 | match $c_s_nypjar2"       \
    "show multicast route group $p_g source-prefix $p_s_nypjar2 extensive | no-more"  \
    "show pim mdt data-mdt-joins instance 13979:11001 | match $c_s_nypjar2"        \
    "start shell"     \
    "netstat -p udp"  \
    "exit"            \
] 

set collect(nypjar2) $collect(chpjar1)
set collect(sfpjar2) $collect(chpjar1)






####################################################################
##4. (optional) cmd handler(procedure):check_ROUTERNAME_CMDNUMBER  ##
##  to parse the output of each {router,cmd} to detect any issues ##
####################################################################
proc check_sfpjar2_1 {router cmd {rate_expected 400}} {

#this is the handler for the No.1 cmd (indicated in the proc name: ..."1") from
#the "check" command list (part 2 of this config file), which will be sent to router "sfpjar2":
#  "show multicast route group 239.2.3.0 source-prefix $p_s_sfpjar2 extensive | match pps"
#one proc (check_ROUTER1_2, check_ROUTER2_1, etc) may be (optionally) defined for
#each cmd.  the proc need to returned either 1 or 0, based on whether the issue get
#detected or not

#init the procedure, don't change these 2 lines
global init_handler
eval $init_handler


#some "built-in" vars available to use in the handler proc:
#  cout_list            :a list that stores each line of the command output
#  cout_list_prev       :same, but stores command output from previous execution(for comparison)
#  cout_llen            :total numer of lines of the command output


#your own code-----------------------------------------------start
    #process each line for current cmd output
    for {set i 0} {$i<$cout_llen} {incr i 1} {          ;#for each line from cmd output
        set cout_line [lindex $cout_list $i]            ;#take a line from the output list
        set cout_line_prev [lindex $cout_list_prev $i]  ;#take the same line,from the previous capture

        #from the line,retrieve the desired counter value. in this case "pps" and "packets":
        #  Statistics: 2 kBps, 20 pps, 12638517 packets
        set matchok1 [regexp {(\d+) pps, (\d+) packets} $cout_line -> pps packets_now]
        set matchok2 [regexp {(\d+) pps, (\d+) packets} $cout_line_prev -> pps_prev packets_prev]

        if $debug {                                     ;#print the lines to debug, if something went wrong
            send_log "take a curr line:--$cout_line--\n"
            send_log "take a prev line:--$cout_line_prev--\n"
            send_log "regex matching results are $matchok1:$matchok2\n"
        }

        if {($matchok1==1) && ($matchok2==1)} {
            #if any traffic does not look correct, set a "flag"
            send_log "capture succeed in both (curr and prev) verison of cmd, start calculate!\n"
            set rate_calc [expr ($packets_now - $packets_prev) / ($time_now - $time_prev)]
            set rate_diff_with_expected [expr {abs($rate_calc - $rate_expected)}]
            #set rate_diff_with_pps [expr ($rate_calc - $pps)]
            set rate_diff_with_pps [expr {abs($rate_calc - $pps)}]
            #chop 0.333 to 0.33
            set rate_diff_with_expected_ratio [format %.2f [expr double($rate_diff_with_expected) / $rate_expected]]
            #turn 0.3 to 30
            set rate_diff_with_expected_perc [expr $rate_diff_with_expected_ratio * 100]
            #display 0.3 as 30%
            myputs "$router:stream#$i rate - displayed:calculated:expected = $pps:$rate_calc:$rate_expected"
            myputs "  caculated rate:($packets_now-$packets_prev)/($time_now-$time_prev) packets/seconds = ${rate_calc}pps"
            myputs "    $rate_diff_with_pps diff with pps, ${rate_diff_with_expected}($rate_diff_with_expected_perc%)diff with expected"
            
            if { $rate_diff_with_expected_ratio >= $rate_gap_ratio_threshold } {
                myputs "    found traffic loss($rate_diff_with_expected_perc% > $rate_gap_ratio_threshold)!"
                return 1       ;#return 1 to indicate issue detection!
            } else {
                if $debug {
                    myputs "    traffic looks normal($rate_diff_with_expected_perc% < $rate_gap_ratio_threshold, within allowed jitter range)!"
                }
            }

        } else {
            #todo: remove the extra echoed stuff in cmd_out
        }
    }
    return 0                   ;#no issue detected
#your own code-----------------------------------------------start
}


#handler for each cmd in each router
proc check_sfpjar2_2 {router cmd} {
    check_sfpjar2_1 $router $cmd 300
}

proc check_sfpjar2_3 {router cmd} {
    #skip the check to 3rd cmd for sfpjar flag check list: nypjar2 not sending traffic to data-mdt!
    #Statistics: 3 kBps, 5 pps, 148495 packets
    #"show multicast route group 239.2.3.0 source-prefix $p_s_nypjar2 extensive | match pps"
    return 0
}

proc check_sfpjar2_4 {router cmd} {
    check_sfpjar2_1 $router $cmd 20
}

proc check_sfpjar2_5 {router cmd} {
    check_sfpjar2_1 $router $cmd 30
}

proc check_sfpjar2_6 {router cmd} {
    return 0
}

#all router chpjar1's handers, same as sfpjar2
proc check_chpjar1_1 {router cmd} {
    check_sfpjar2_1 $router $cmd
}
proc check_chpjar1_2 {router cmd} {
    check_sfpjar2_2 $router $cmd
}
proc check_chpjar1_3 {router cmd} {
    check_sfpjar2_3 $router $cmd
}
proc check_chpjar1_4 {router cmd} {
    check_sfpjar2_4 $router $cmd
}
proc check_chpjar1_5 {router cmd} {
    check_sfpjar2_5 $router $cmd
}
proc check_chpjar1_6 {router cmd} {
    check_sfpjar2_6 $router $cmd
}

#all router nypjar2's handers, same as sfpjar2
proc check_nypjar2_1 {router cmd} {
    check_sfpjar2_1 $router $cmd
}
proc check_nypjar2_2 {router cmd} {
    check_sfpjar2_2 $router $cmd
}
proc check_nypjar2_3 {router cmd} {
    check_sfpjar2_3 $router $cmd
}
proc check_nypjar2_4 {router cmd} {
    check_sfpjar2_4 $router $cmd
}
proc check_nypjar2_5 {router cmd} {
    check_sfpjar2_5 $router $cmd
}
proc check_nypjar2_6 {router cmd} {
    check_sfpjar2_6 $router $cmd
}


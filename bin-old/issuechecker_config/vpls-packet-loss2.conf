set debug 0                                             ;#debug level: 1(brief), 3(verbose)
set login_script attp                                   ;#script used to login to the router
                                                        ;#attp - nina's att account
                                                        ;#attse - att se account
                                                        ;#attjtac - att jtac account
                                                        ;#jtaclab - account to login to jtac lab
set logfile "log1_test_$runtime.txt"                  ;#log file name, optional
set logfile_issue "log2_test_$runtime.txt"            ;#log file only after issue detected, optional
set check_intv 10                                       ;#interval between each round check
set maxrounds_captured 10000                            ;#max rounds to capture the issue
set routers {pe28 pe43}                                 ;#list of all routers, for login purpose only, optional.
                                                        ;#if not defined, will find out all routers name from cmd arrays
                                                        ;#'pre_test', 'test', 'check' and 'collect'
set pre_test(pe28) [ list          \
        "show system uptime"                 \
        "show version"                 \
        ]
set pre_test(pe43) $pre_test(pe28)

#cmds:both routers {{{1}}}
set check(pe28) [ list                          \
        "show interfaces ge-2/3/3 extensive | no-more"    \
        {request pfe execute target fpc2 command "show xeth-pic 3 port 3 stats" | no-more}        \
        {request pfe execute target fpc2 command "show npez 3 counters debug" | no-more}          \
        {request pfe execute target fpc1 command "show xeth-pic 3 port 0 stats" | no-more}        \
        {request pfe execute target fpc1 command "show npez 3 counters debug"| no-more}           \
        {request pfe execute target fpc2 command "show xeth-pic 1 port 3 stats" | no-more}        \
        {request pfe execute target fpc2 command "show npez 1 counters debug" | no-more}          \
        ]
set check(pe43) [ list                          \
        "show interfaces ge-1/1/7 extensive | no-more"    \
        {request pfe execute target fpc1 command "show xeth-pic 1 port 7 stats" | no-more}        \
        {request pfe execute target fpc1 command "show npez 1 counters debug" | no-more}          \
        "show interfaces ge-1/1/8 extensive | no-more"    \
        {request pfe execute target fpc1 command "show xeth-pic 1 port 8 stats" | no-more}        \
        {request pfe execute target fpc1 command "show npez 1 counters debug" | no-more}          \
        "show interfaces ge-2/1/8 extensive | no-more"    \
        {request pfe execute target fpc2 command "show xeth-pic 1 port 8 stats" | no-more}        \
        {request pfe execute target fpc2 command "show npez 1 counters debug" | no-more}          \
        ]

#parsers:pe28 {{{1}}}
## port ge-2/3/3 {{{2}}}
set check_code_pe28_1 {
    #Output packet error count                                 0
    #myputs "\$cout_aline(75) is \"$cout_aline(75)\""
#        set does_match [regexp {Input  packets:\s+(\d+)\s+(\d+) pps} $cout_line -> packets pps]
    set does_match1 [regexp {Output packet error count \s+ (\d+)} $cout_line -> errorcounts]
    set does_match2 [regexp {Output packet error count \s+ (\d+)} $cout_line_prev -> errorcounts_prev]
    if {$does_match1 && $does_match2} {
        myputs "monitoring this line: $cout_line"
        if {$errorcounts > $errorcounts_prev} {
            myputs "\"Output packet error count\" increased ($errorcounts_prev -> $errorcounts), issue appear!"
            return 1
        } else {
            myputs "error counter no change ($errorcounts_prev -> $errorcounts), need to check again!"
        }
    } else {
        #myputs "no match, looking at the wrong line?"
    }
}

set check_code_pe28_2 {
    #Packet Error                             0               19450
#        set does_match [regexp {Input  packets:\s+(\d+)\s+(\d+) pps} $cout_line -> packets pps]
    set does_match1 [regexp {Packet Error \s+ (\d+) \s+ (\d+)} $cout_line -> errorcounts_rx errorcounts]
    set does_match2 [regexp {Packet Error \s+ (\d+) \s+ (\d+)} $cout_line_prev -> errorcounts_rx_prev errorcounts_prev]
    if {$does_match1 && $does_match2} {
        myputs "monitoring this line: $cout_line"
        if {$errorcounts > $errorcounts_prev} {
            myputs "\"Packet Error\" increased ($errorcounts_prev -> $errorcounts), issue appear!"
            return 1
        } else {
            myputs "error counter no change ($errorcounts_prev -> $errorcounts), need to check again!"
        }
    } else {
        #myputs "no match, looking at the wrong line?"
    }
}

set check_code_pe28_3 {
    #TM_DBG_TX_RRF_DISCARD_PKTS                0x1D8166 : 0x00004BFA  19450
#        set does_match [regexp {Input  packets:\s+(\d+)\s+(\d+) pps} $cout_line -> packets pps]
    #these don't work for unknown reason
    #set does_match1 [regexp {TM_DBG_TX_RRF_DISCARD_PKTS \s+ [[:xdigit:]]+ : [[:xdigit:]]+\s+(\d+)} $cout_line -> errorcounts]
    #set does_match1 [regexp {TM_DBG_TX_RRF_DISCARD_PKTS \s+ [[:xdigit:]]+ : [[:xdigit:]]+\s+(\d+)} $cout_line_prev -> errorcounts_prev]
    set does_match1 [regexp {TM_DBG_TX_RRF_DISCARD_PKTS\s+\S+ : \S+\s+(\d+)} $cout_line -> errorcounts]
    set does_match2 [regexp {TM_DBG_TX_RRF_DISCARD_PKTS\s+\S+ : \S+\s+(\d+)} $cout_line_prev -> errorcounts_prev]
    if {$does_match1 && $does_match2} {
        myputs "monitoring this line: $cout_line"
        if {$errorcounts > $errorcounts_prev} {
            myputs "\"RRF counter\" increased ($errorcounts_prev -> $errorcounts), issue appear!"
            return 1
        } else {
            myputs "error counter no change ($errorcounts_prev -> $errorcounts), need to check again!"
        }
    } else {
        #myputs "no match, looking at the wrong line?"
    }
}

## ae28 {{{2}}}
#
set check_code_pe28_4 $check_code_pe28_2
set check_code_pe28_5 $check_code_pe28_3
set check_code_pe28_6 $check_code_pe28_2
set check_code_pe28_7 $check_code_pe28_3

#parsers:pe43 {{{1}}}

set check_code_pe43_1 $check_code_pe28_1
set check_code_pe43_2 $check_code_pe28_2
set check_code_pe43_3 $check_code_pe28_3
set check_code_pe43_4 $check_code_pe43_1
set check_code_pe43_5 $check_code_pe43_2
set check_code_pe43_6 $check_code_pe43_3
set check_code_pe43_7 $check_code_pe43_1
set check_code_pe43_8 $check_code_pe43_2
set check_code_pe43_9 $check_code_pe43_3

set collect(pe28) [ list 				         \
        {request pfe execute target fpc2 command "show xeth-pic 3 port 3 stats"}        \
        {request pfe execute target fpc2 command "show npez 3 counters debug"}          \
        ]

set collect(pe43) [ list 				         \
        {request pfe execute target fpc1 command "show xeth-pic 1 port 7 stats"}        \
        {request pfe execute target fpc1 command "show npez 1 counters debug"}          \
        ]

#set test1(pe28) [ list                          \
#        "configure"                             \
#        "set interfaces ge-2/3/3 unit 3428 vlan-tags outer 2007"        \
#        "set interfaces ge-2/3/3 unit 3428 vlan-tags inner 3428"        \
#        "show | compare | no-more"      \
#        "commit and-quit"               \
#        ]
#set test2(pe28) [ list                          \
#        "configure"                             \
#        "set interfaces ge-2/3/3 unit 3428 vlan-id 3428"        \
#        "show | compare | no-more"                              \
#        "commit and-quit"                       \
#        ]


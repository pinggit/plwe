
        set debug 0     ;#print more info about how the script is running (def 1)
        #set debug 3    ;#most verbose info, set only when sth went wrong
        set logfile "log1_pr12345.txt"     ;#log file name, optional
        #log file that record all info AFTER issue detected, optional
        set logfile_issue "log2_pr12345_$runtime.txt" 
        set maxfilesize 100000000         ;#max size of each log file(in Bytes) before get gzipped
        #set log_dir "~/att-jtac-lab-logs"
        set check_intv 5                  ;#interval between each round check
        set maxrounds 20000               ;#max rounds to check
        set maxrounds_captured 10         ;#max rounds to capture the issue
        #set flag_check_method 1           ;#any flag indicate a hit

        set pre_test(alecto) {
            "show version | no-more" 
            "show interfaces fxp0 terse"
        }
        set pre_test(hermes) $pre_test(alecto)

        set check(alecto) {
            "show interfaces ge-1/3/0.601 extensive | match pps"
            "show vpls connections instance 13979:333601"
        }
        set check(hermes) {
            "show interfaces ge-1/2/2.601 extensive | match pps"
            "show vpls connections instance 13979:333601"
        }

        #issue definition code:
        set check_code_alecto_1 {
            #match from any line of the output
            set does_match [                                     regexp {Input  packets:\s+(\d+)\s+(\d+) pps}     $cout_line -> packets pps                        ]
            #or: just match from the 1st line of the output
            #    set does_match [regexp {Input  packets:\s+(\d+)\s+(\d+) pps} $cout_aline(1) -> packets pps]
            if {($does_match)} {
                if {$pps == 0} {
                    myputs "pps 0, no traffic, the issue appears!"
                    return 1
                }
            }
        }
    

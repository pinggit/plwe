set debug 1                                             ;#debug level: 1(brief), 3(verbose)
set login_script attp                                   ;#script used to login to the router
                                                        ;#attp - nina's att account
                                                        ;#attse - att se account
                                                        ;#attjtac - att jtac account
                                                        ;#jtaclab - account to login to jtac lab
set logfile "log1_test_$runtime.txt"                  ;#log file name, optional
set logfile_issue "log2_test_$runtime.txt"            ;#log file only after issue detected, optional
set check_intv 10                                       ;#interval between each round check
set routers {pe28 pe43}                                 ;#list of all routers, for login purpose only, optional.
                                                        ;#if not defined, will find out all routers name from cmd arrays
                                                        ;#'pre_test', 'test', 'check' and 'collect'
set pre_test(pe28) [ list          \
        "show system uptime"                 \
        "show version"                 \
        ]
set pre_test(pe43) $pre_test(pe28)

set check(pe28) [ list                          \
        "show interfaces ge-2/3/3 extensive | no-more"    \
        ]
set check(pe43) [ list                          \
        "show interfaces ge-1/1/7 extensive | no-more"    \
        ]
set check_code_pe28_1 {
    #Output packet error count                                 0
    #myputs "\$cout_aline(75) is \"$cout_aline(75)\""
#        set does_match [regexp {Input  packets:\s+(\d+)\s+(\d+) pps} $cout_line -> packets pps]
    set does_match1 [regexp {Output packet error count \s+ (\d+)} $cout_line -> errorcounts]
    set does_match2 [regexp {Output packet error count \s+ (\d+)} $cout_line_prev -> errorcounts_prev]
    if {$does_match1 && $does_match2} {
        myputs "monitoring this line: $cout_line"
        if {$errorcounts > $errorcounts_prev} {
            myputs "error counter increased ($errorcounts_prev -> $errorcounts), issue appear!"
            return 1
        } else {
            myputs "error counter no change ($errorcounts_prev -> $errorcounts), need to check again!"
        }
    } else {
        #myputs "no match, looking at the wrong line?"
    }
}

set check_code_pe43_1 {
    #Output packet error count                                 0
    #myputs "\$cout_aline(75) is \"$cout_aline(75)\""
#        set does_match [regexp {Input  packets:\s+(\d+)\s+(\d+) pps} $cout_line -> packets pps]
    set does_match1 [regexp {Output packet error count \s+ (\d+)} $cout_line -> errorcounts]
    set does_match2 [regexp {Output packet error count \s+ (\d+)} $cout_line_prev -> errorcounts_prev]
    if {$does_match1 && $does_match2} {
        myputs "monitoring this line: $cout_line"
        if {$errorcounts > $errorcounts_prev} {
            myputs "error counter increased ($errorcounts_prev -> $errorcounts), issue appear!"
            return 1
        } else {
            myputs "error counter no change ($errorcounts_prev -> $errorcounts), need to check again!"
        }
    } else {
        #myputs "no match, looking at the wrong line?"
    }
}

set collect(pe28) [ list 				         \
        {request pfe execute target fpc2 command "show xeth-pic 3 port 3 stats"}        \
        {request pfe execute target fpc2 command "show npez 3 counters debug"}          \
        ]

set collect(pe43) [ list 				         \
        {request pfe execute target fpc1 command "show xeth-pic 1 port 7 stats"}        \
        {request pfe execute target fpc1 command "show npez 1 counters debug"}          \
        ]

#set test(alecto) [ list                          \
#        {request pfe execute target fpc2 command "show npez 3 counters debug"   }                          \
#        ]
#

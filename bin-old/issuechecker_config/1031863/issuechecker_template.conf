
                                                        #config file

                                                        #summary:
                                                        #1. login all routers
                                                        #2. send "pre_check" cmds
                                                        #3. send "check" cmds to get a baseline
                                                        #4. sleep $check_intv
                                                        #5. go in a loop 
                                                        #   a) send "check" cmds repeatedly
                                                        #   b) calculate/analyze the "issue" (check_flag)
                                                        #   c) is the issue got detected ?
                                                        #       yes: 
                                                        #           send "collect" cmds
                                                        #           send a notification (email)
                                                        #           have recreated $maxrounds_captured? 
                                                        #               yes: exit
                                                        #               no : go to 6
                                                        #       no:
                                                        #           send "test" cmds
                                                        #           go to 5
                                                        #6. sleep $check_intv and go to 5


;####################################################################
;##1. general parameters , optional                                ##
;####################################################################


set debug 1                                             ;#debug level: 1(brief), 3(verbose)

set login_script jtaclab                                   ;#script used to login to the router
                                                        ;#attn - nina's att account
                                                        ;#attse - att se account
                                                        ;#attjtac - att jtac account
                                                        ;#jtaclab - account to login to jtac lab


set logfile "log1_test_$runtime.txt"                  ;#log file name, optional
set logfile_issue "log2_test_$runtime.txt"            ;#log file only after issue detected, optional
#set flag_check_method 1                                ;#any flag indicate a hit
set check_intv 10                                       ;#interval between each round check
#set maxrounds 20000                                    ;#max rounds to check
#set maxrounds_captured 10                              ;#max rounds to capture the issue
#set maxfilesize 100000000                              ;#max size of each log file(in Bytes) before get gzipped

                                                        
                                                        
set routers {alecto hermes}                                 ;#list of all routers, for login purpose only, optional.
                                                        ;#if not defined, will find out all routers name from cmd arrays
                                                        ;#'pre_test', 'test', 'check' and 'collect'

set domain_name ".jtac-east.jnpr.net"

#telnet:
set login_info(alecto) 		{ogin lab assword herndon1}
set login_info(hermes) 		{ogin lab assword herndon1}
#ssh:
set ssh_username lab
#set login_info(alecto) 		{assword herndon1}
#set login_info(hermes) 		{assword herndon1}

####################################################################
##2. one time info collection, before the test loops              ##
####################################################################

                                                        ;#pre_test: run just 1 time before the test loop starts
set pre_test(alecto) [ list          "show system uptime"                 "show version"                 ]
set pre_test(hermes) $pre_test(alecto)



####################################################################
##3. router-cmds array: check(ROUTERNAME) :                       ##
##  cmds that are used to detect the issues                       ##
####################################################################

set check(alecto) [ list         "show interfaces ge-1/3/0.601 extensive | match pps"           ]
set check(hermes) [ list  "show interfaces ge-1/2/2.601 extensive | match pps"         ]


                                                        #"issue" definition, optional
                                                        #  set rule_calc { expr ... }
                                                        #  if omitted, use default rule - consider to be an issue whichever 
                                                        #  command detect an issue. 

                                                        #  in this example, a complex issue definition(rule) is defined: it is
                                                        #  considered an issue only if, in any router, one of the 1st/4th, 2nd/5th or
                                                        #  3rd/6th streams does not look "consistent" (meaning like stream 1 is
                                                        #  detected to be a problem however stream 4 looks OK, so on so forth.
                                                        #  according to the check array, this means c-stream was not totally forwarded
                                                        #  into p-stream, or vice versa. In either case, it means packet loss)

#set rule_calc {                                                          #
#    expr                                                                 #
#        [expr $result_flag($router,1) ^ $result_flag($router,4)] ||      #
#        [expr $result_flag($router,2) ^ $result_flag($router,5)] ||      #
#        [expr $result_flag($router,3) ^ $result_flag($router,6)]         #
#}

#optional: print a essage  about currently defined rule
#set rule_msg "consider an issue only when c-stream and p-stream are not consistent"






####################################################################
##4. router-cmds array: collect(ROUTERNAME) :                     ##
##  cmds that will be sent everytime after the issue got detected ##
####################################################################

set collect(alecto) [ list 				         "show interfaces ge-1/3/0.601 extensive | no-more"           "start shell"                                                "sleep 10"                                                   "exit"                                                       ] 

set collect(hermes) $collect(alecto)





####################################################################
##4.1 (optional) hook code:check_code_ROUTERNAME_CMDNUMBER        ##
##  parsing output of each {router,cmd} to detect (an) issue(s)   ##
####################################################################

set check_code_alecto_1 {
    #match from the any line of the output
    set does_match [regexp {Input  packets:\s+(\d+)\s+(\d+) pps} $cout_line -> packets pps]
    #or: just match from the 1st line of the output
    #    set does_match [regexp {Input  packets:\s+(\d+)\s+(\d+) pps} $cout_aline(1) -> packets pps]
    if {($does_match)} {
        if {$pps == 0} {
            myputs "pps 0, no traffic, the issue appears!"
            return 1
        }
    }
}


####################################################################
##4.2 (optional) cmd handler(procedure):check_ROUTERNAME_CMDNUMBER##
##  to parse the output of each {router,cmd} to detect any issues ##
####################################################################
#proc check_alecto_1 {router cmd {var1 400}} {
#
#                                                        #this is the handler for the No.1 cmd (indicated in the proc name: ..."1") from
#                                                        #the "check" command list (part 2 of this config file), which will be sent to router "sfpjar2":
#                                                        #  "show multicast route group 239.2.3.0 source-prefix $p_s_sfpjar2 extensive | match pps"
#                                                        #one proc (check_ROUTER1_2, check_ROUTER2_1, etc) may be (optionally) defined for
#                                                        #each cmd.  the proc need to returned either 1 or 0, based on whether the issue get
#                                                        #detected or not
#
#
#global init_handler                                     ;#init the procedure, don't change these 2 lines
#eval $init_handler
#
#
#                                                        #some "built-in" vars available to be used in the handler proc:
#                                                        #  cout_list           :a list that stores each line of the command output
#                                                        #  cout_list_prev      :same, but stores command output from previous execution(for comparison)
#                                                        #  cout_llen           :total numer of lines of the command output
#                                                        #
#                                                        #  cout_line           :any line in current cmd output (e.g. "show version")
#                                                        #  cout_line_prev      :same, but take from a previous output
#                                                        #  cout_aline(3)       :3rd line in current cmd output (e.g. "show version")
#                                                        #  cout_aline_prev(3)  :same, but take from a previous output
#
#
#                                                        #process each line for current cmd output
#    for {set i 0} {$i<$cout_llen} {incr i 1} {          ;#for each line from cmd output
#        set cout_line [lindex $cout_list $i]            ;#take a line from the output list
#        set cout_line_prev [lindex $cout_list_prev $i]  ;#take the same line,from the previous capture
#
##your own code-----------------------------------------------start
#
#                                                        #from the line,retrieve the desired counter value. in this case "pps" and "packets":
#                                                        #  Input  packets:         839694229583              2022060 pps
#
#        set does_match [regexp {Input  packets:\s+(\d+)\s+(\d+) pps} $cout_line -> packets pps]
#
#        if {($does_match)} {                            ;#if any traffic does not look correct, set "flag"
#            if {$pps == 0} {
#                myputs "the issue appears!"
#                return 1
#            }
#        }
#
##your own code-----------------------------------------------end
#
#    }
#
#    myputs "issue not seen in cmd -$cmd-!"
#    return 0                   ;#no issue detected
#}



####################################################################
##5. cmds to be sent if the issue has not been reproduced yet     ##
####################################################################

                                                        #test:          commands ran in the test loop before 'check' commands
set test(alecto) [ list                          "configure private"                          "show | compare | last 40 | no-more"         "exit"                                       ]


                                                        #test1~10:      run different cmds in each round
                                                        #    if any of these exist, "test" won't be executed
                                                        #run: test1 in 1st round, test2 in 2nd round, ...test4 in 4th round, 
                                                        #     test1 in 5th round ... so on so forth
#set test1(pe12) [ list            #    "configure private"          #    "rollback 1" "show | compare | last 40 | no-more"  #    "commit"                     #    "exit"                       #]
#
#set test2(pe13) [ list            #    "configure private"          #    "rollback 1" "show | compare | last 40 | no-more"  #    "commit"                     #    "exit"                       #]
#set test3(pe12) [ list            #    "configure private"          #    "rollback 1" "show | compare | last 40 | no-more"  #    "commit"                     #    "exit"                       #]
#set test4(pe13) [ list            #    "configure private"          #    "rollback 1" "show | compare | last 40 | no-more"  #    "commit"                     #    "exit"                       #]



#todo:
#config_change, in defined sequence among all routers
#set config_change(1,sfpjar2) [ list        #    "configure private"                  #    "exit"                               #]
#set config_change(2,chpjar1) $config_change(sfpjar2)
#set config_change(3,nypjar2) $config_change(sfpjar2)
#set config_change(sfpjar2) [ list        #    "SWITCHOVER"                         #]



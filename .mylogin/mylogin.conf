#################################################################################
#this file contains most (global?) variables/parameters needed for the script 	#
#to run	,currently might be buggy, to be enhanced    				#
# 		pings@juniper.net 	
# 		version 0.1 		Mar 2011 				#
# 		version 0.2 		april 2011 				#
#################################################################################

#files
	#login info (username password enable etc..), 
	#rarely used feature, 
	#login info can be a/v in 2 places:
	# 1) from this config file, in 'login_info' list
	#    only tcl "set" syntax is supported in this config file
	#
	# 2) from another file,defined in a var 'loginfile'
	#any info found in step 1) will make the step 2) get skipped
	#
	#in the 2nd scenario(when info is only a/v in a file other than this config file)
	#2 syntaxes are currently supported
	# 1) only plain text like the following, no comments allowed
	#    remotehost1 sername tom assphase Tom12#
	#    remotehost2 ogin fred password fred123
	#    ...
	# 2) the tcl "set" syntax
	#    set login_info(remotehost) 	{sername tom assphase Tom12#}
	#         or
	#    set login_info(remotehost) 	"sername tom assphase Tom12#"
	#
	set loginfile 			"~/bin/temp/myloginfile.txt"
	
	#send an email with zipped log file as attachment
	#some necessary local unix tools (zip,mail,uuencode,etc) are required
	set emailme 			{pings@juniper.net}
	set emailcase 			{support-private@juniper.net}
	set zip 			0

	#file containing command lines to be excuted
	#rarely used now
	#same as login info, get skipped if info is already a/v in this config file
	set cmdsfile 			"~/bin/temp/cmdsfile.txt"

	#timestamp-based log file name for the whole session,in typical JTAC case-like format: 
	# 2011-0123-1234-12.exp.log, here 1234-12 is hourminute-second
	# this is the initial default log file format, in practice, this should be
	# modified to JTAC case (1111-1111-1111) format in order to update cases via emails
	set timestamp 			[exec date +%Y-%m%d-%H%M-%S]
	#folder for the initial log files
	set log_dir 			"~/logs/expect"
	#initial default log file
	set mylog_file 			"$log_dir/$timestamp.exp.log"
	#start log once the script start
	set log_when_start 		1
	#when unset(to 0),depress the interactive msg back/force with remote system from user
	#only msg generated by script(puts,send_user) will be displayed
	#this knob is useful when too much boring detail in the interaction are printed 
	#in the terminal
	set do_log_user 		1
	

#parameters/function/flow-control knobs
	set welcome_msg 		0
	#general timeout parameters when expect sth
	set timeout 			10
	#set -1 to never timeout (persistently wait)
	#set timeout 			-1


	####autologin function,set to 0 to disable 
	#once enabled, the script will use the info in login_info array
	#and try to login the remote system
	set autologin 			1
	#prompt for script to check if logged in successfully
	#pay cautions to tcl regex theory (not same as perl)
	#  use \\\$ to indicate a literal '$' (escape the ancor)
	#use {} to simply turn of regex
	#set success_login_pattern 	"(%|>|#|\\\$) $"
	set success_login_pattern	{(% |> |# |\$ |%|>|#|\$)$}
	set login_timeout 		6

	####auto retry function,usually try 3 times(2 retry) 
	#set to 0 to disable retry
	set max_login_retry 		2


	####periodical cmds execution in a loop
	#when periodically executing cmds, the max rounds of execution
	set maxrounds 			60
	set round_intv 			30
	#prompt for script to check whether current mode is proper for the cmd to be executed
	#better narrow down to specific need,e.g. don't proceed normal CLI under -> shell mode
	#set pattern4cmd 		"(%|>|#|\\\$) $"
	set pattern4cmd 		$success_login_pattern
	#this will(I guess,not tested) turn off prompt check before sending cmds
	#set pattern4cmd 		".*"
	
	#add some timestamp for every cmd, in router usually it's 'show clock'
	#while in pc it's 'date'
	set addclock 			0
	set clockcmd 			"show clock"
	#set clockcmd 			"date"
	
	#interval between each cmd_group
	set cmds_groups_intv 		1
	
	#sleep time between each cmd
	set cmds_intv 			1
	#set cmds_intv 			0
	
	#time to wait for a cmd return, in theory we won't get stuck in an output
	#e.g show tech, show reboot, dir, copy ... for more than 30s
	set cmd_timeout 		30
	set quitontimeout 		1
	set quitkey 			"!\r"


	#re-sourcing feature, under interact mode, right before an cmd execution
	#source the config file again to check update
	#this is kind of a shortcut(dirty?) implementation
	set redosource 			1
	
	
	#other script execution flows control knobs
	#set 1 if you want script stay interact mode after successful login
	#set 0 if you want script to proceed with cmds right after login
	set interact_after_login_ok 	1
	
	#set 1 will make script go into interact right away once autologin failed
	#set 0, script will ask user y/n to proceed or exit
	#not fully tested
	set interact_force_login_nok	0
	
	#set 1, go interactive mode after some work done (session remains) instead of exit
	#kind of obsolete knob
	set interact_after_alldone	1

	#anti_idle timeout
	set anti_idle_timeout 		30
	#anti_idle string, here send a blank and then delete it
	#doesn't work in some scenario like under vxworks
	set anti_idle_string 		" \177"	
	#send C-u: this should work for most routers, even e-serials vxworks shell mode
	#the drawback is, in most unix, if you call some old cmd and didn't hit return be4 timeout
	#it will be deleted from history
	#set anti_idle_string 		"\025"	

	#affact execution of autologin,action_pattern_list, and cmds
	set send_initial_cr 		3
	#affact only execution of cmds
	set prefix_cr_for_each_cmd 	1
	set leaf_node_prefix 		"PA_"

#debug options
	#global DEBUG NEWFEATURE
	set DEBUG 			0
	#this is only used when new function is still in coding stage
	#don't modify this
	set NEWFEATURE 			0

#host info: connect name - hostname in secureCRT
	set host2name(HRNDVA-FIOS-2) 	{172.25.84.204}
	set host2name(MX80-1) 		{172.25.88.11}
	set host2name(MX80-2-con) 	{172.25.84.185:2006}
	set host2name(MX80-2) 		{172.25.88.12}
	set host2name(MX960-1) 		{172.25.84.201}
	set host2name(MX960-2) 		{172.25.84.206}
	set host2name(MX960-1-master) 	{172.25.84.202}
	set host2name(MX960-1-standby) 	{172.25.84.211} 
	set host2name(MX960-2-master) 	{172.25.84.206}
	set host2name(MX960-2-re0) 	{172.25.84.216}
	set host2name(MX960-2-re1) 	{172.25.84.217}
	set host2name(MX960-2-re0-cons) {172.25.84.185:2014}
	set host2name(MX960-2-re1-cons) {172.25.84.185:2017}
	set host2name(M5) 		{172.25.85.95}
	set host2name(e320-1) 		{172.25.84.204}
	set host2name(e320-1-con) 	{172.25.84.199}
	set host2name(e320-2) 		{172.25.84.212}
	set host2name(ol1) 		{192.168.48.2}
	set host2name(ol2) 		{192.168.62.2}
	set host2name(terminal) 	{172.25.84.185}
	set host2name(EX) 		{172.25.84.157}
	set host2name(c72) 		{172.25.84.210}
	set host2name(c35-bj) 		{172.27.100.70}

	set host2name(erx1)      	{172.25.84.203}
	set host2name(HRNDVA-FIOS-2)    {172.25.84.204}
	set host2name(fios2)      	{172.25.84.205}
	set host2name(curly)      	{172.25.84.207}
	set host2name(moe)      	{172.25.84.208}
	set host2name(e320-VFFTP-1)     {172.25.84.212}
	set host2name(jerry)      	{172.25.84.213}
	set host2name(tom)      	{172.25.84.214}
	set host2name(fios1)      	{172.25.84.215}
	set host2name(magic)      	{172.25.84.209}
	set host2name(cisco7206)      	{172.25.84.210}
	set host2name(radius)      	{172.25.84.251}
	set host2name(cloud)      	{172.25.84.169}
	set host2name(win2kvm)      	{172.25.83.149}

	set host2name(moe-con)		{172.25.84.189};		#TS5-7.jtac-east.jnpr.net 2002
	set host2name(curly-con)	{172.25.84.188};		#TS5-7.jtac-east.jnpr.net 2003
	set host2name(E320-VFFTP-1-con) {172.25.84.193};		#TS5-7.jtac-east.jnpr.net 2007
	set host2name(tom-con)		{172.25.84.195};		#TS5-7.jtac-east.jnpr.net 2008
	set host2name(jerry-con)	{172.25.84.194}; 		#TS5-7.jtac-east.jnpr.net 2009	
	set host2name(FIOS1-con)	{172.25.84.196};	        #TS5-7.jtac-east.jnpr.net 2010
	set host2name(erx1-con)		{172.25.84.197};	        #TS5-7.jtac-east.jnpr.net 2011
	set host2name(HRNDVA-FIOS-2)	{172.25.84.199};	        #TS5-7.jtac-east.jnpr.net 2016
	set host2name(erx40-con)	{172.25.84.197};	        #TS5-7.jtac-east.jnpr.net 2013


#login info: logon actions in secureCRT
	set login_info(e320-2) 		{assword: herndon > "en 15" assword: herndon3}
	set login_info(HRNDVA-FIOS-2) 	{> en "#" "show clock"}
	set login_info(e320-1) 		{> en "#" "show clock"}
	set login_info(MX80-1) 		{ogin lab assword herndon1 > config}
	set login_info(MX80-2) 		{ogin lab assword herndon1 > config}
	set login_info(MX960-1) 	{ogin lab1 assword herndon2 > config}
	set login_info(MX960-2)   	{ogin lab assword herndon1 > config}
	set login_info(MX960-2-re0)     {ogin lab assword herndon1 > config}
	set login_info(ol1) 		{ogin admin assword juniper123}
	set login_info(ol2) 		{ogin admin assword juniper123}
	set login_info(radius) 		{ogin lab assword herndon}
	set login_info(terminal) 	{assword herndon1}
	set login_info(EX) 		{ogin lab assword herndon1}
	set login_info(M5) 		{172.25.85.95}
	set login_info(c72) 		{ogin lab assword herndon1}
	set login_info(c35-bj) 		{172.27.100.70}

#action sequences, this can be either:
#1) after successful login,but before formal work start: execute list: prework
#2) when ready to go, starting the task under interact mode: execute list: pattern_action_list

	####do some pre-defined preparation works after login
	#all pattern-action pairs in 'prework' list will be executed
	#e.g. set term length, ftp login to another server to check updates, etc
	set doprework 			0
	#set this to -1 to wait for long time task (like coredump decompress)
	#set to a proper value to get timed output (like to truncate a long output)
	set pattern_action_timeout 	-1
	set pattern_action_intv 	1
	set pattern_action_groups_intv 	1
	
#data files, this scales good, when more new commands/automation files need to be added
#(cmds, pattern-action definitions,coredump handling,abbreviations, etc)
	source ~/.mylogin/abb-data.conf		
	source ~/.mylogin/cmds-data.conf
	source ~/.mylogin/pa-data.conf
	source ~/.mylogin/other-data.conf
	source ~/.mylogin/coredump.conf
	source ~/.mylogin/nofwd1211.conf



#e320 coredump decode related:
	##################################################################################################
	#once login, do some automation works
	#here we use 'dirty' implementation,to automate all coredump file handlings job in JTAC work
	#'dirty' in terms of: some user-defined vars,like caseid,caselog_file,caseid_pattern,
	#are also referenced directly from within main codes
	#this is quite un-scalable and hard to maintain, need time to make it clean
	#ideally user var should be seperated from the main codes for the most extent
	##################################################################################################
	#action 1) set pattern_action_timeout to -1 for time consuming tasks
	#action 2) change caseid , decode mode, dmpfilebasename, fullpath, probably junoe also

	set caseid 			"2011-0814-0025"
	set dmpfilebasename 		"M-10_28_08_14_2011_06_44" 
	#set caseid 			"2011-0813-0026"
	#set dmpfilebasename 		"LM-10_28_08_13_2011_03_27" 
	#set caseid 			"2011-0812-0708"
	#set dmpfilebasename 		"Core" 
	#-hw  {srp, srp310, srp320, lm4, lm10, linecard}
	set hw 				"lm10"
	set decode_only 		0
	set deleteudmp_after_done 	1
	set dmphost 			"radius"
	#set dmphost 			"win2kvm"

	#this is for log cmd only
	set caselog_dir 		"~/vzlogs"
	set caselog_file 		"$caselog_dir/$caseid.log"

	#for !lc xxxx-xxxx-xxxx cmd only
	#set caseid_pattern 		"\[1-9]\[0-9]\[0-9]\[0-9]-\[0-9]\[0-9]\[0-9]\[0-9]-\[0-9]\[0-9]\[0-9]\[0-9]"
	set caseid_pattern 		{[1-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]}
	#this doesn't work, don't know why
	#set caseid_pattern 		{[1-9]{4}-[0-9]{4}-[0-9]{4}}
	

	#corefiles are usually only located in one of these 3 folders:
	set dmpfileftppath1 		"/mnt/ftp/$caseid/$dmpfilebasename.dmp"
	set dmpfileftppath2 		"/mnt/ftp/$dmpfilebasename.dmp"
	set dmpfilehomepath1 		"/mnt/home/public_html/$caseid/$dmpfilebasename.dmp"
	set dmpfilehomepath2 		"/mnt/home/$dmpfilebasename.dmp"

	#currently I (we?) only know sth about lm10 dmp decode
	set junose 			"9-0-1p0-7-5-2" 
	set mem 			256
	switch -- $hw \
	"lm10" {
	    set mem 1024
	} "lm4" {
	    set mem 512
	} "srp320" {
	    set mem 4096
	}

	#these are for !ea cmd only
	set decodelog_file 		"~/vzlogs/$caseid-$dmpfilebasename.decode.log"

	set dmp_upload_dir 		"/mnt/coredumps/$caseid/"

	#set decompress 		"coreDumpDecompress.exe \\\\wf-ccstage\\coredumps\\2011\\$caseid\\$dmpfilebasename.dmp"
	set decompress 			"coreDumpDecompress.exe $caseid/$dmpfilebasename.dmp"

	#set mounthome 			{net use N: \\10.10.4.35\pings}
	#set umounthome 		{net use N: /delete}
	#set decode 			"pccl_pang.exe -debug C:\\pings\\$junose\\lm10.debug -core \\\\wf-ccstage\\coredumps\\2011\\$caseid\\$dmpfilebasename.udmp -mem 1024 -hw lm10"
	#set decode 			"pccl_pang.exe -debug C:\\pings\\$junose\\lm10.debug -core C:\\pings\\$caseid\\$dmpfilebasename.udmp -mem $mem -hw $hw"
	set decode 			"pccl_pang.exe -debug $junose/$hw.debug -core $caseid/$dmpfilebasename.udmp -mem $mem -hw $hw"
	
	
	#start some customerized work , here is an example: coredump file handling:
	# upload,decompress,decode the dmp file and
	# then process,upload,or extract the log file
	set core(SHELL) 		{ E_dmp_pre_handle 				\
					  dmp_decompress_decode_from_win 		\
					  dmp_post_handle  				\
					}

	#prepare case folders in wfccstage, windows server, and find the file, for later processing
	set E_dmp_pre_handle(SHELL) 							\
					[ list 						\
					    "\\\$" "if \[ ! -d $dmp_upload_dir \]; then mkdir $dmp_upload_dir; fi" 				\
					    "\\\$" "dmpfileftpdir=/mnt/ftp/$caseid; dmpfilehomedir=/mnt/home/public_html/$caseid" 		\
					    "\\\$" "dmpfileftppath1=$dmpfileftppath1; dmpfileftppath2=$dmpfileftppath2" 			\
					    "\\\$" "dmpfilehomepath1=$dmpfilehomepath1; dmpfilehomepath2=$dmpfilehomepath2" 			\
					    "\\\$" {file $dmpfileftppath1 $dmpfileftppath2 $dmpfilehomepath} 					\
					    "\\\$" { if [ -e $dmpfileftpdir/*.dmp ]; then dmpf=$dmpfileftpdir/*.dmp; elif [ -e $dmpfilehomedir/*.dmp ]; then dmpf=$dmpfilehomedir/*.dmp; elif [ -e $dmpfilehomepath ]; then dmpf=$dmpfilehomepath; elif [ -e $dmpfileftppath1 ]; then dmpf=$dmpfileftppath1; else dmpf=$dmpfileftppath2; fi } 			\
					    "\\\$" {echo $dmpf} 										\
					    "\\\$" {stat -t $dmpf} 	 									\
					    "\\\$" {dmpfilename=$(basename $dmpf} 								\
					    "\\\$" "dmpbasename=\$\{\$dmpfilename%.*.*\}" 							\
					    "\\\$" "if \[ ! -d /mnt/radius/$caseid \]; then mkdir /mnt/radius/$caseid; fi" 			\
					 ]
	#				    "\\\$" "if \[ ! -e \$dmpfilehomepath \]; then mkdir /mnt/home/public_html/$caseid; fi " 	\
	#				    "\\\$" "if \[ ! -e \$dmpfilehomepath \]; then rsync -aP \$dmpf \$dmpfilehomepath; fi" 		\

	set E_dmp_cp2pc(SHELL) 		[ list "\\\$" "rsync -avP \$dmpf /mnt/radius/$caseid" ]

	#based on line card type, do different handling
	if {$hw=="lm10"} {
	    #I only know some lm10 shell cmd , mostly just the print__11.., so far that it's worth decompress and decode...
	    set dmp_decompress_decode_from_win(SHELL) { 				\
					E_dmp_cp2pc 					\
					E_dmp_login_win  				\
					dmp_decompress_and_or_decode  			\
					E_dmp_logout_win 				\
	    }
	    #so some post handling are needed for lm10 decoded log file
	    set dmp_post_handle(SHELL) { E_dmp_post_handle E_dmp_upload_to_de }
	} else {
	    #for other cards I have no idea, so just upload them to DE
	    set dmp_decompress_decode_from_win(SHELL) "" 
	    set dmp_post_handle(SHELL) { E_dmp_upload_to_de }
	}

	set E_dmp_login_win(SHELL) 						\
					[ list 					\
					    "\\\$" "ssh $dmphost" 		\
					    "assword" "herndon" 		\
					    "\\\$" "cd pings"  			\
					]


	if $decode_only {
	    set dmp_decompress_and_or_decode(SHELL) { E_dmp_decode }
	} else {
	    set dmp_decompress_and_or_decode(SHELL) { E_dmp_decompress E_dmp_decode }
	}

	set E_dmp_decompress(SHELL) 	[ list "\\\$" "$decompress" ]

	set E_dmp_decode(SHELL) 					\
					[ list 					\
					    "\\\$" "$decode" 			\
					    "->" "print__11Ic1Detector" 	\
					    "->" "showIxps" 			\
					    "->" "showIcImageFixClient" 	\
					    "->" {showTraceLog("sraDetector")} 	\
					    "->" {showTraceLog ("IxpDetector")}	\
					    "->" {showTraceLog ("Egress IXP")} 	\
					    "->" {showTraceLog "lm10DosAL"} 	\
					    "->" showCrashDump 			\
					    "->" {getSraDebugTrace 0,16}  	\
					    "->" "printLast48IntermediateMinorPanics" \
					    "->" "printLast12IntermediateMajorPanics" \
					]

	#set E_dmp_decode_clis(SHELL) 	"$lm10_dmp_decode_shell"
	if {$deleteudmp_after_done} {
	    set E_dmp_logout_win(SHELL) 					\
					    [ list 				\
						"->" "exit" 			\
						"\\\$" "rm $caseid/*.udmp" 	\
						"\\\$" "exit" 			\
					    ]
	} else {
	    set E_dmp_logout_win(SHELL) 					\
					    [ list 				\
						"->" "exit" 			\
						"\\\$" "exit" 			\
					    ]
	}

	set E_dmp_post_handle(SHELL) 						\
					[ list 					\
					    "\\\$" "todos $decodelog_file" 				\
					    "\\\$" "cp $decodelog_file $dmp_upload_dir" 		\
					    "\\\$" "cd $dmp_upload_dir" 				\
					    "\\\$" "decoded_fbase=$caseid-$dmpfilebasename" 		\
					    "\\\$" "sed '1,60d' \$decoded_fbase.decode.log > \$decoded_fbase-decoded.log" 	\
					    "\\\$" "rm \$decoded_fbase.decode.log" 			\
					    "\\\$" "cd" 						\
					]
					    #other options:
					    #"\\\$" "myfilename=\$(basename $decodelog_file)" 		\
					    #"\\\$" "mybasename=\$\{\$myfilename%.*.*\}" 			\
					    #"\\\$" "mydirname=\$(dirname $mylog_file)" 			\
					    #"\\\$" "newfilename=$caseid.decode.log" 			\
					    #"\\\$" "newfullname=\$mydirname\$newfilename" 		\
					    #"\\\$" "cp $mylog_file \$newfullname"			\
					    #"name" "herndon" 			\
#					    more automated, get dmp file name per site name, using glob
#					    "\\\$" "rsync -aP `ls *$siteid*.dmp` /mnt/coredumps/$caseid/`ls *$siteid*.dmp`" 	\
#					    attached the decode result to case
#					    "$" "attachcase.sh $caseid" 	\
#					    "\\\$" "attachcase.sh \$decoded_fbase-decoded.log"		\
#
	set E_dmp_upload_to_de(SHELL) 							\
					[ list 						\
					    "\\\$" "rsync -aP \$dmpf $dmp_upload_dir" 	\
					]
